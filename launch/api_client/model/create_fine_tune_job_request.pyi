# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from launch_client import schemas  # noqa: F401

class CreateFineTuneJobRequest(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "training_file",
            "base_model",
            "fine_tuning_method",
            "model_name",
            "validation_file",
            "hyperparameters",
        }

        class properties:
            base_model = schemas.StrSchema
            fine_tuning_method = schemas.StrSchema

            class hyperparameters(schemas.DictSchema):
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                def __getitem__(
                    self,
                    name: typing.Union[str,],
                ) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                def get_item_oapg(
                    self,
                    name: typing.Union[str,],
                ) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        str,
                    ],
                ) -> "hyperparameters":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            model_name = schemas.StrSchema
            training_file = schemas.StrSchema
            validation_file = schemas.StrSchema
            __annotations__ = {
                "base_model": base_model,
                "fine_tuning_method": fine_tuning_method,
                "hyperparameters": hyperparameters,
                "model_name": model_name,
                "training_file": training_file,
                "validation_file": validation_file,
            }
    training_file: MetaOapg.properties.training_file
    base_model: MetaOapg.properties.base_model
    fine_tuning_method: MetaOapg.properties.fine_tuning_method
    model_name: MetaOapg.properties.model_name
    validation_file: MetaOapg.properties.validation_file
    hyperparameters: MetaOapg.properties.hyperparameters

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["base_model"]) -> MetaOapg.properties.base_model: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["fine_tuning_method"]
    ) -> MetaOapg.properties.fine_tuning_method: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["hyperparameters"]
    ) -> MetaOapg.properties.hyperparameters: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_name"]) -> MetaOapg.properties.model_name: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["training_file"]) -> MetaOapg.properties.training_file: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["validation_file"]
    ) -> MetaOapg.properties.validation_file: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "base_model",
                "fine_tuning_method",
                "hyperparameters",
                "model_name",
                "training_file",
                "validation_file",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["base_model"]) -> MetaOapg.properties.base_model: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["fine_tuning_method"]
    ) -> MetaOapg.properties.fine_tuning_method: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["hyperparameters"]
    ) -> MetaOapg.properties.hyperparameters: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_name"]) -> MetaOapg.properties.model_name: ...
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["training_file"]) -> MetaOapg.properties.training_file: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["validation_file"]
    ) -> MetaOapg.properties.validation_file: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "base_model",
                "fine_tuning_method",
                "hyperparameters",
                "model_name",
                "training_file",
                "validation_file",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        training_file: typing.Union[
            MetaOapg.properties.training_file,
            str,
        ],
        base_model: typing.Union[
            MetaOapg.properties.base_model,
            str,
        ],
        fine_tuning_method: typing.Union[
            MetaOapg.properties.fine_tuning_method,
            str,
        ],
        model_name: typing.Union[
            MetaOapg.properties.model_name,
            str,
        ],
        validation_file: typing.Union[
            MetaOapg.properties.validation_file,
            str,
        ],
        hyperparameters: typing.Union[
            MetaOapg.properties.hyperparameters,
            dict,
            frozendict.frozendict,
        ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CreateFineTuneJobRequest":
        return super().__new__(
            cls,
            *_args,
            training_file=training_file,
            base_model=base_model,
            fine_tuning_method=fine_tuning_method,
            model_name=model_name,
            validation_file=validation_file,
            hyperparameters=hyperparameters,
            _configuration=_configuration,
            **kwargs,
        )
