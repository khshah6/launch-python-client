# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401
from launch_client import schemas  # noqa: F401

class ToolConfig(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
        Ref: https://openapi-generator.tech

        Do not edit the class manually.

        Configuration for tool use.
    NOTE: this config is highly experimental and signature will change significantly in future iterations.
    """

    class MetaOapg:
        required = {
            "name",
        }

        class properties:
            name = schemas.StrSchema
            execution_timeout_seconds = schemas.IntSchema
            max_iterations = schemas.IntSchema
            should_retry_on_error = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "execution_timeout_seconds": execution_timeout_seconds,
                "max_iterations": max_iterations,
                "should_retry_on_error": should_retry_on_error,
            }
    name: MetaOapg.properties.name

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["execution_timeout_seconds"]
    ) -> MetaOapg.properties.execution_timeout_seconds: ...
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_iterations"]) -> MetaOapg.properties.max_iterations: ...
    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["should_retry_on_error"]
    ) -> MetaOapg.properties.should_retry_on_error: ...
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "name",
                "execution_timeout_seconds",
                "max_iterations",
                "should_retry_on_error",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["execution_timeout_seconds"]
    ) -> typing.Union[MetaOapg.properties.execution_timeout_seconds, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["max_iterations"]
    ) -> typing.Union[MetaOapg.properties.max_iterations, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["should_retry_on_error"]
    ) -> typing.Union[MetaOapg.properties.should_retry_on_error, schemas.Unset]: ...
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "name",
                "execution_timeout_seconds",
                "max_iterations",
                "should_retry_on_error",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)
    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        execution_timeout_seconds: typing.Union[
            MetaOapg.properties.execution_timeout_seconds, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        max_iterations: typing.Union[
            MetaOapg.properties.max_iterations, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        should_retry_on_error: typing.Union[
            MetaOapg.properties.should_retry_on_error, bool, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "ToolConfig":
        return super().__new__(
            cls,
            *_args,
            name=name,
            execution_timeout_seconds=execution_timeout_seconds,
            max_iterations=max_iterations,
            should_retry_on_error=should_retry_on_error,
            _configuration=_configuration,
            **kwargs,
        )
