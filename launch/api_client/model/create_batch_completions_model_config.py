# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from launch.api_client import schemas  # noqa: F401


class CreateBatchCompletionsModelConfig(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "model",
            "labels",
        }

        class properties:
            class labels(schemas.DictSchema):
                class MetaOapg:
                    additional_properties = schemas.StrSchema

                def __getitem__(self, name: typing.Union[str,]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(self, name: typing.Union[str,]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        str,
                    ],
                ) -> "labels":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            model = schemas.StrSchema
            checkpoint_path = schemas.StrSchema
            num_shards = schemas.IntSchema

            @staticmethod
            def quantize() -> typing.Type["Quantization"]:
                return Quantization

            seed = schemas.IntSchema
            __annotations__ = {
                "labels": labels,
                "model": model,
                "checkpoint_path": checkpoint_path,
                "num_shards": num_shards,
                "quantize": quantize,
                "seed": seed,
            }

    model: MetaOapg.properties.model
    labels: MetaOapg.properties.labels

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkpoint_path"]) -> MetaOapg.properties.checkpoint_path:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_shards"]) -> MetaOapg.properties.num_shards:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantize"]) -> "Quantization":
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "labels",
                "model",
                "checkpoint_path",
                "num_shards",
                "quantize",
                "seed",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["checkpoint_path"]
    ) -> typing.Union[MetaOapg.properties.checkpoint_path, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["num_shards"]
    ) -> typing.Union[MetaOapg.properties.num_shards, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantize"]) -> typing.Union["Quantization", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["seed"]
    ) -> typing.Union[MetaOapg.properties.seed, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "labels",
                "model",
                "checkpoint_path",
                "num_shards",
                "quantize",
                "seed",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        model: typing.Union[
            MetaOapg.properties.model,
            str,
        ],
        labels: typing.Union[
            MetaOapg.properties.labels,
            dict,
            frozendict.frozendict,
        ],
        checkpoint_path: typing.Union[MetaOapg.properties.checkpoint_path, str, schemas.Unset] = schemas.unset,
        num_shards: typing.Union[MetaOapg.properties.num_shards, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        quantize: typing.Union["Quantization", schemas.Unset] = schemas.unset,
        seed: typing.Union[MetaOapg.properties.seed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CreateBatchCompletionsModelConfig":
        return super().__new__(
            cls,
            *_args,
            model=model,
            labels=labels,
            checkpoint_path=checkpoint_path,
            num_shards=num_shards,
            quantize=quantize,
            seed=seed,
            _configuration=_configuration,
            **kwargs,
        )


from launch.api_client.model.quantization import Quantization
