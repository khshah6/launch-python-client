# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from launch.api_client import schemas  # noqa: F401


class CreateBatchCompletionsRequest(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request object for batch completions.
    """

    class MetaOapg:
        required = {
            "model_config",
            "output_data_path",
        }

        class properties:
            @staticmethod
            def model_config() -> typing.Type["CreateBatchCompletionsModelConfig"]:
                return CreateBatchCompletionsModelConfig

            output_data_path = schemas.StrSchema

            @staticmethod
            def content() -> typing.Type["CreateBatchCompletionsRequestContent"]:
                return CreateBatchCompletionsRequestContent

            class data_parallelism(schemas.IntSchema):
                class MetaOapg:
                    inclusive_maximum = 64
                    inclusive_minimum = 1

            input_data_path = schemas.StrSchema

            class max_runtime_sec(schemas.IntSchema):
                class MetaOapg:
                    inclusive_maximum = 172800
                    inclusive_minimum = 1

            @staticmethod
            def tool_config() -> typing.Type["ToolConfig"]:
                return ToolConfig

            __annotations__ = {
                "model_config": model_config,
                "output_data_path": output_data_path,
                "content": content,
                "data_parallelism": data_parallelism,
                "input_data_path": input_data_path,
                "max_runtime_sec": max_runtime_sec,
                "tool_config": tool_config,
            }

    model_config: "CreateBatchCompletionsModelConfig"
    output_data_path: MetaOapg.properties.output_data_path

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_config"]) -> "CreateBatchCompletionsModelConfig":
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["output_data_path"]) -> MetaOapg.properties.output_data_path:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> "CreateBatchCompletionsRequestContent":
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_parallelism"]) -> MetaOapg.properties.data_parallelism:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_data_path"]) -> MetaOapg.properties.input_data_path:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_runtime_sec"]) -> MetaOapg.properties.max_runtime_sec:
        ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tool_config"]) -> "ToolConfig":
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "model_config",
                "output_data_path",
                "content",
                "data_parallelism",
                "input_data_path",
                "max_runtime_sec",
                "tool_config",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_config"]) -> "CreateBatchCompletionsModelConfig":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["output_data_path"]
    ) -> MetaOapg.properties.output_data_path:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["content"]
    ) -> typing.Union["CreateBatchCompletionsRequestContent", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["data_parallelism"]
    ) -> typing.Union[MetaOapg.properties.data_parallelism, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["input_data_path"]
    ) -> typing.Union[MetaOapg.properties.input_data_path, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["max_runtime_sec"]
    ) -> typing.Union[MetaOapg.properties.max_runtime_sec, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["tool_config"]
    ) -> typing.Union["ToolConfig", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "model_config",
                "output_data_path",
                "content",
                "data_parallelism",
                "input_data_path",
                "max_runtime_sec",
                "tool_config",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        model_config: "CreateBatchCompletionsModelConfig",
        output_data_path: typing.Union[
            MetaOapg.properties.output_data_path,
            str,
        ],
        content: typing.Union["CreateBatchCompletionsRequestContent", schemas.Unset] = schemas.unset,
        data_parallelism: typing.Union[
            MetaOapg.properties.data_parallelism, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        input_data_path: typing.Union[MetaOapg.properties.input_data_path, str, schemas.Unset] = schemas.unset,
        max_runtime_sec: typing.Union[
            MetaOapg.properties.max_runtime_sec, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        tool_config: typing.Union["ToolConfig", schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CreateBatchCompletionsRequest":
        return super().__new__(
            cls,
            *_args,
            model_config=model_config,
            output_data_path=output_data_path,
            content=content,
            data_parallelism=data_parallelism,
            input_data_path=input_data_path,
            max_runtime_sec=max_runtime_sec,
            tool_config=tool_config,
            _configuration=_configuration,
            **kwargs,
        )


from launch.api_client.model.create_batch_completions_model_config import (
    CreateBatchCompletionsModelConfig,
)
from launch.api_client.model.create_batch_completions_request_content import (
    CreateBatchCompletionsRequestContent,
)
from launch.api_client.model.tool_config import ToolConfig
