# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
)
from typing_extensions import Annotated, Self


class CompletionStreamV1Request(BaseModel):
    """
    Request object for a stream prompt completion task.
    """  # noqa: E501

    frequency_penalty: Optional[
        Union[Annotated[float, Field(le=2.0, strict=True, ge=0.0)], Annotated[int, Field(le=2, strict=True, ge=0)]]
    ] = None
    guided_choice: Optional[List[StrictStr]] = None
    guided_grammar: Optional[StrictStr] = None
    guided_json: Optional[Dict[str, Any]] = None
    guided_regex: Optional[StrictStr] = None
    include_stop_str_in_output: Optional[StrictBool] = None
    max_new_tokens: StrictInt
    presence_penalty: Optional[
        Union[Annotated[float, Field(le=2.0, strict=True, ge=0.0)], Annotated[int, Field(le=2, strict=True, ge=0)]]
    ] = None
    prompt: StrictStr
    return_token_log_probs: Optional[StrictBool] = False
    stop_sequences: Optional[List[StrictStr]] = None
    temperature: Union[
        Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]
    ]
    top_k: Optional[Annotated[int, Field(strict=True, ge=-1)]] = None
    top_p: Optional[
        Union[Annotated[float, Field(le=1.0, strict=True)], Annotated[int, Field(le=1, strict=True)]]
    ] = None
    __properties: ClassVar[List[str]] = [
        "frequency_penalty",
        "guided_choice",
        "guided_grammar",
        "guided_json",
        "guided_regex",
        "include_stop_str_in_output",
        "max_new_tokens",
        "presence_penalty",
        "prompt",
        "return_token_log_probs",
        "stop_sequences",
        "temperature",
        "top_k",
        "top_p",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompletionStreamV1Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompletionStreamV1Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "frequency_penalty": obj.get("frequency_penalty"),
                "guided_choice": obj.get("guided_choice"),
                "guided_grammar": obj.get("guided_grammar"),
                "guided_json": obj.get("guided_json"),
                "guided_regex": obj.get("guided_regex"),
                "include_stop_str_in_output": obj.get("include_stop_str_in_output"),
                "max_new_tokens": obj.get("max_new_tokens"),
                "presence_penalty": obj.get("presence_penalty"),
                "prompt": obj.get("prompt"),
                "return_token_log_probs": obj.get("return_token_log_probs")
                if obj.get("return_token_log_probs") is not None
                else False,
                "stop_sequences": obj.get("stop_sequences"),
                "temperature": obj.get("temperature"),
                "top_k": obj.get("top_k"),
                "top_p": obj.get("top_p"),
            }
        )
        return _obj
