# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
)
from typing_extensions import Annotated, Self

from launch.api_client.models.callback_auth import CallbackAuth
from launch.api_client.models.model_endpoint_deployment_state import (
    ModelEndpointDeploymentState,
)
from launch.api_client.models.model_endpoint_resource_state import (
    ModelEndpointResourceState,
)
from launch.api_client.models.model_endpoint_status import ModelEndpointStatus
from launch.api_client.models.model_endpoint_type import ModelEndpointType


class GetModelEndpointV1Response(BaseModel):
    """
    GetModelEndpointV1Response
    """  # noqa: E501

    aws_role: Optional[StrictStr] = None
    bundle_name: StrictStr
    created_at: datetime
    created_by: StrictStr
    default_callback_auth: Optional[CallbackAuth] = None
    default_callback_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]] = None
    deployment_name: Optional[StrictStr] = None
    deployment_state: Optional[ModelEndpointDeploymentState] = None
    destination: StrictStr
    endpoint_type: ModelEndpointType
    id: StrictStr
    labels: Optional[Dict[str, StrictStr]] = None
    last_updated_at: datetime
    metadata: Optional[Dict[str, Any]] = None
    name: StrictStr
    num_queued_items: Optional[StrictInt] = None
    post_inference_hooks: Optional[List[StrictStr]] = None
    public_inference: Optional[StrictBool] = None
    resource_state: Optional[ModelEndpointResourceState] = None
    results_s3_bucket: Optional[StrictStr] = None
    status: ModelEndpointStatus
    __properties: ClassVar[List[str]] = [
        "aws_role",
        "bundle_name",
        "created_at",
        "created_by",
        "default_callback_auth",
        "default_callback_url",
        "deployment_name",
        "deployment_state",
        "destination",
        "endpoint_type",
        "id",
        "labels",
        "last_updated_at",
        "metadata",
        "name",
        "num_queued_items",
        "post_inference_hooks",
        "public_inference",
        "resource_state",
        "results_s3_bucket",
        "status",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetModelEndpointV1Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_callback_auth
        if self.default_callback_auth:
            _dict["default_callback_auth"] = self.default_callback_auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployment_state
        if self.deployment_state:
            _dict["deployment_state"] = self.deployment_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_state
        if self.resource_state:
            _dict["resource_state"] = self.resource_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetModelEndpointV1Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "aws_role": obj.get("aws_role"),
                "bundle_name": obj.get("bundle_name"),
                "created_at": obj.get("created_at"),
                "created_by": obj.get("created_by"),
                "default_callback_auth": CallbackAuth.from_dict(obj["default_callback_auth"])
                if obj.get("default_callback_auth") is not None
                else None,
                "default_callback_url": obj.get("default_callback_url"),
                "deployment_name": obj.get("deployment_name"),
                "deployment_state": ModelEndpointDeploymentState.from_dict(obj["deployment_state"])
                if obj.get("deployment_state") is not None
                else None,
                "destination": obj.get("destination"),
                "endpoint_type": obj.get("endpoint_type"),
                "id": obj.get("id"),
                "labels": obj.get("labels"),
                "last_updated_at": obj.get("last_updated_at"),
                "metadata": obj.get("metadata"),
                "name": obj.get("name"),
                "num_queued_items": obj.get("num_queued_items"),
                "post_inference_hooks": obj.get("post_inference_hooks"),
                "public_inference": obj.get("public_inference"),
                "resource_state": ModelEndpointResourceState.from_dict(obj["resource_state"])
                if obj.get("resource_state") is not None
                else None,
                "results_s3_bucket": obj.get("results_s3_bucket"),
                "status": obj.get("status"),
            }
        )
        return _obj
