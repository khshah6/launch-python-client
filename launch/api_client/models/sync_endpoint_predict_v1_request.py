# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Annotated, Self

from launch.api_client.models.callback_auth import CallbackAuth


class SyncEndpointPredictV1Request(BaseModel):
    """
    SyncEndpointPredictV1Request
    """  # noqa: E501

    args: Optional[Any] = None
    callback_auth: Optional[CallbackAuth] = None
    callback_url: Optional[StrictStr] = None
    cloudpickle: Optional[StrictStr] = None
    num_retries: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    return_pickled: Optional[StrictBool] = False
    timeout_seconds: Optional[Union[StrictFloat, StrictInt]] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "args",
        "callback_auth",
        "callback_url",
        "cloudpickle",
        "num_retries",
        "return_pickled",
        "timeout_seconds",
        "url",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncEndpointPredictV1Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of callback_auth
        if self.callback_auth:
            _dict["callback_auth"] = self.callback_auth.to_dict()
        # set to None if args (nullable) is None
        # and model_fields_set contains the field
        if self.args is None and "args" in self.model_fields_set:
            _dict["args"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncEndpointPredictV1Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "args": obj.get("args"),
                "callback_auth": CallbackAuth.from_dict(obj["callback_auth"])
                if obj.get("callback_auth") is not None
                else None,
                "callback_url": obj.get("callback_url"),
                "cloudpickle": obj.get("cloudpickle"),
                "num_retries": obj.get("num_retries"),
                "return_pickled": obj.get("return_pickled") if obj.get("return_pickled") is not None else False,
                "timeout_seconds": obj.get("timeout_seconds"),
                "url": obj.get("url"),
            }
        )
        return _obj
