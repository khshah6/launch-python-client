# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing_extensions import Self

from launch.api_client.models.batch_job_status import BatchJobStatus


class DockerImageBatchJob(BaseModel):
    """
    This is the entity-layer class for a Docker Image Batch Job, i.e. a batch job created via the \"supply a docker image for a k8s job\" API.
    """  # noqa: E501

    annotations: Optional[Dict[str, StrictStr]] = None
    completed_at: Optional[datetime] = None
    created_at: datetime
    created_by: StrictStr
    id: StrictStr
    num_workers: Optional[StrictInt] = 1
    override_job_max_runtime_s: Optional[StrictInt] = None
    owner: StrictStr
    status: BatchJobStatus
    __properties: ClassVar[List[str]] = [
        "annotations",
        "completed_at",
        "created_at",
        "created_by",
        "id",
        "num_workers",
        "override_job_max_runtime_s",
        "owner",
        "status",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DockerImageBatchJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DockerImageBatchJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "annotations": obj.get("annotations"),
                "completed_at": obj.get("completed_at"),
                "created_at": obj.get("created_at"),
                "created_by": obj.get("created_by"),
                "id": obj.get("id"),
                "num_workers": obj.get("num_workers") if obj.get("num_workers") is not None else 1,
                "override_job_max_runtime_s": obj.get("override_job_max_runtime_s"),
                "owner": obj.get("owner"),
                "status": obj.get("status"),
            }
        )
        return _obj
