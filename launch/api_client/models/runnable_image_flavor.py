# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class RunnableImageFlavor(BaseModel):
    """
    This is the entity-layer class for the Model Bundle flavor of a runnable image.
    """  # noqa: E501

    command: List[StrictStr]
    env: Optional[Dict[str, StrictStr]] = None
    flavor: StrictStr
    healthcheck_route: Optional[StrictStr] = "/readyz"
    predict_route: Optional[StrictStr] = "/predict"
    protocol: StrictStr
    readiness_initial_delay_seconds: Optional[StrictInt] = 120
    repository: StrictStr
    tag: StrictStr
    __properties: ClassVar[List[str]] = [
        "command",
        "env",
        "flavor",
        "healthcheck_route",
        "predict_route",
        "protocol",
        "readiness_initial_delay_seconds",
        "repository",
        "tag",
    ]

    @field_validator("flavor")
    def flavor_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["runnable_image"]):
            raise ValueError("must be one of enum values ('runnable_image')")
        return value

    @field_validator("protocol")
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["http"]):
            raise ValueError("must be one of enum values ('http')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunnableImageFlavor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunnableImageFlavor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "command": obj.get("command"),
                "env": obj.get("env"),
                "flavor": obj.get("flavor"),
                "healthcheck_route": obj.get("healthcheck_route")
                if obj.get("healthcheck_route") is not None
                else "/readyz",
                "predict_route": obj.get("predict_route") if obj.get("predict_route") is not None else "/predict",
                "protocol": obj.get("protocol"),
                "readiness_initial_delay_seconds": obj.get("readiness_initial_delay_seconds")
                if obj.get("readiness_initial_delay_seconds") is not None
                else 120,
                "repository": obj.get("repository"),
                "tag": obj.get("tag"),
            }
        )
        return _obj
