# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictStr
from typing_extensions import Self

from launch.api_client.models.model_bundle_environment_params import (
    ModelBundleEnvironmentParams,
)
from launch.api_client.models.model_bundle_packaging_type import (
    ModelBundlePackagingType,
)


class CreateModelBundleV1Request(BaseModel):
    """
    Request object for creating a Model Bundle.
    """  # noqa: E501

    app_config: Optional[Dict[str, Any]] = None
    env_params: ModelBundleEnvironmentParams
    location: StrictStr
    metadata: Optional[Dict[str, Any]] = None
    name: StrictStr
    packaging_type: ModelBundlePackagingType
    requirements: List[StrictStr]
    schema_location: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "app_config",
        "env_params",
        "location",
        "metadata",
        "name",
        "packaging_type",
        "requirements",
        "schema_location",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateModelBundleV1Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of env_params
        if self.env_params:
            _dict["env_params"] = self.env_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateModelBundleV1Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "app_config": obj.get("app_config"),
                "env_params": ModelBundleEnvironmentParams.from_dict(obj["env_params"])
                if obj.get("env_params") is not None
                else None,
                "location": obj.get("location"),
                "metadata": obj.get("metadata"),
                "name": obj.get("name"),
                "packaging_type": obj.get("packaging_type"),
                "requirements": obj.get("requirements"),
                "schema_location": obj.get("schema_location"),
            }
        )
        return _obj
