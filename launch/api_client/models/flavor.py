# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing_extensions import Literal, Self

from launch.api_client.models.cloudpickle_artifact_flavor import (
    CloudpickleArtifactFlavor,
)
from launch.api_client.models.runnable_image_flavor import RunnableImageFlavor
from launch.api_client.models.streaming_enhanced_runnable_image_flavor import (
    StreamingEnhancedRunnableImageFlavor,
)
from launch.api_client.models.triton_enhanced_runnable_image_flavor import (
    TritonEnhancedRunnableImageFlavor,
)
from launch.api_client.models.zip_artifact_flavor import ZipArtifactFlavor

FLAVOR_ONE_OF_SCHEMAS = [
    "CloudpickleArtifactFlavor",
    "RunnableImageFlavor",
    "StreamingEnhancedRunnableImageFlavor",
    "TritonEnhancedRunnableImageFlavor",
    "ZipArtifactFlavor",
]


class Flavor(BaseModel):
    """
    Flavor
    """

    # data type: CloudpickleArtifactFlavor
    oneof_schema_1_validator: Optional[CloudpickleArtifactFlavor] = None
    # data type: ZipArtifactFlavor
    oneof_schema_2_validator: Optional[ZipArtifactFlavor] = None
    # data type: RunnableImageFlavor
    oneof_schema_3_validator: Optional[RunnableImageFlavor] = None
    # data type: StreamingEnhancedRunnableImageFlavor
    oneof_schema_4_validator: Optional[StreamingEnhancedRunnableImageFlavor] = None
    # data type: TritonEnhancedRunnableImageFlavor
    oneof_schema_5_validator: Optional[TritonEnhancedRunnableImageFlavor] = None
    actual_instance: Optional[
        Union[
            CloudpickleArtifactFlavor,
            RunnableImageFlavor,
            StreamingEnhancedRunnableImageFlavor,
            TritonEnhancedRunnableImageFlavor,
            ZipArtifactFlavor,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "CloudpickleArtifactFlavor",
        "RunnableImageFlavor",
        "StreamingEnhancedRunnableImageFlavor",
        "TritonEnhancedRunnableImageFlavor",
        "ZipArtifactFlavor",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = Flavor.model_construct()
        error_messages = []
        match = 0
        # validate data type: CloudpickleArtifactFlavor
        if not isinstance(v, CloudpickleArtifactFlavor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudpickleArtifactFlavor`")
        else:
            match += 1
        # validate data type: ZipArtifactFlavor
        if not isinstance(v, ZipArtifactFlavor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ZipArtifactFlavor`")
        else:
            match += 1
        # validate data type: RunnableImageFlavor
        if not isinstance(v, RunnableImageFlavor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunnableImageFlavor`")
        else:
            match += 1
        # validate data type: StreamingEnhancedRunnableImageFlavor
        if not isinstance(v, StreamingEnhancedRunnableImageFlavor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StreamingEnhancedRunnableImageFlavor`")
        else:
            match += 1
        # validate data type: TritonEnhancedRunnableImageFlavor
        if not isinstance(v, TritonEnhancedRunnableImageFlavor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TritonEnhancedRunnableImageFlavor`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in Flavor with oneOf schemas: CloudpickleArtifactFlavor, RunnableImageFlavor, StreamingEnhancedRunnableImageFlavor, TritonEnhancedRunnableImageFlavor, ZipArtifactFlavor. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in Flavor with oneOf schemas: CloudpickleArtifactFlavor, RunnableImageFlavor, StreamingEnhancedRunnableImageFlavor, TritonEnhancedRunnableImageFlavor, ZipArtifactFlavor. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into CloudpickleArtifactFlavor
        try:
            instance.actual_instance = CloudpickleArtifactFlavor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ZipArtifactFlavor
        try:
            instance.actual_instance = ZipArtifactFlavor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RunnableImageFlavor
        try:
            instance.actual_instance = RunnableImageFlavor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StreamingEnhancedRunnableImageFlavor
        try:
            instance.actual_instance = StreamingEnhancedRunnableImageFlavor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TritonEnhancedRunnableImageFlavor
        try:
            instance.actual_instance = TritonEnhancedRunnableImageFlavor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into Flavor with oneOf schemas: CloudpickleArtifactFlavor, RunnableImageFlavor, StreamingEnhancedRunnableImageFlavor, TritonEnhancedRunnableImageFlavor, ZipArtifactFlavor. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into Flavor with oneOf schemas: CloudpickleArtifactFlavor, RunnableImageFlavor, StreamingEnhancedRunnableImageFlavor, TritonEnhancedRunnableImageFlavor, ZipArtifactFlavor. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            CloudpickleArtifactFlavor,
            RunnableImageFlavor,
            StreamingEnhancedRunnableImageFlavor,
            TritonEnhancedRunnableImageFlavor,
            ZipArtifactFlavor,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
