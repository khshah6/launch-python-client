# coding: utf-8

"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class ToolConfig(BaseModel):
    """
    Configuration for tool use. NOTE: this config is highly experimental and signature will change significantly in future iterations.
    """  # noqa: E501

    execution_timeout_seconds: Optional[StrictInt] = 60
    max_iterations: Optional[StrictInt] = 10
    name: StrictStr
    should_retry_on_error: Optional[StrictBool] = True
    __properties: ClassVar[List[str]] = ["execution_timeout_seconds", "max_iterations", "name", "should_retry_on_error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "execution_timeout_seconds": obj.get("execution_timeout_seconds")
                if obj.get("execution_timeout_seconds") is not None
                else 60,
                "max_iterations": obj.get("max_iterations") if obj.get("max_iterations") is not None else 10,
                "name": obj.get("name"),
                "should_retry_on_error": obj.get("should_retry_on_error")
                if obj.get("should_retry_on_error") is not None
                else True,
            }
        )
        return _obj
