"""
    launch

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from launch.api_client.api_client import ApiClient, Endpoint as _Endpoint
from launch.api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)
from launch.api_client.model.create_async_task_response import (
    CreateAsyncTaskResponse,
)
from launch.api_client.model.create_model_bundle_request import (
    CreateModelBundleRequest,
)
from launch.api_client.model.create_model_bundle_response import (
    CreateModelBundleResponse,
)
from launch.api_client.model.create_model_endpoint_request import (
    CreateModelEndpointRequest,
)
from launch.api_client.model.create_model_endpoint_response import (
    CreateModelEndpointResponse,
)
from launch.api_client.model.delete_model_endpoint_response import (
    DeleteModelEndpointResponse,
)
from launch.api_client.model.endpoint_predict_request import (
    EndpointPredictRequest,
)
from launch.api_client.model.get_async_task_response import (
    GetAsyncTaskResponse,
)
from launch.api_client.model.get_model_endpoint_response import (
    GetModelEndpointResponse,
)
from launch.api_client.model.http_validation_error import HTTPValidationError
from launch.api_client.model.list_model_bundles_response import (
    ListModelBundlesResponse,
)
from launch.api_client.model.list_model_endpoints_response import (
    ListModelEndpointsResponse,
)
from launch.api_client.model.model_bundle_order_by import ModelBundleOrderBy
from launch.api_client.model.model_bundle_response import ModelBundleResponse
from launch.api_client.model.model_endpoint_order_by import (
    ModelEndpointOrderBy,
)
from launch.api_client.model.sync_endpoint_predict_response import (
    SyncEndpointPredictResponse,
)
from launch.api_client.model.update_model_endpoint_request import (
    UpdateModelEndpointRequest,
)
from launch.api_client.model.update_model_endpoint_response import (
    UpdateModelEndpointResponse,
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_async_inference_task_v1_async_tasks_post_endpoint = _Endpoint(
            settings={
                "response_type": (CreateAsyncTaskResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/async-tasks",
                "operation_id": "create_async_inference_task_v1_async_tasks_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_endpoint_id",
                    "endpoint_predict_request",
                    "user_id",
                ],
                "required": [
                    "model_endpoint_id",
                    "endpoint_predict_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_endpoint_id": (str,),
                    "endpoint_predict_request": (EndpointPredictRequest,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_endpoint_id": "model_endpoint_id",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_endpoint_id": "query",
                    "endpoint_predict_request": "body",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_model_bundle_v1_model_bundles_post_endpoint = _Endpoint(
            settings={
                "response_type": (CreateModelBundleResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-bundles",
                "operation_id": "create_model_bundle_v1_model_bundles_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_model_bundle_request",
                    "user_id",
                ],
                "required": [
                    "create_model_bundle_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_model_bundle_request": (CreateModelBundleRequest,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "user_id": "user-id",
                },
                "location_map": {
                    "create_model_bundle_request": "body",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_model_endpoint_v1_model_endpoints_post_endpoint = _Endpoint(
            settings={
                "response_type": (CreateModelEndpointResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-endpoints",
                "operation_id": "create_model_endpoint_v1_model_endpoints_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_model_endpoint_request",
                    "user_id",
                ],
                "required": [
                    "create_model_endpoint_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_model_endpoint_request": (
                        CreateModelEndpointRequest,
                    ),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "user_id": "user-id",
                },
                "location_map": {
                    "create_model_endpoint_request": "body",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_sync_inference_task_v1_sync_tasks_post_endpoint = _Endpoint(
            settings={
                "response_type": (SyncEndpointPredictResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/sync-tasks",
                "operation_id": "create_sync_inference_task_v1_sync_tasks_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_endpoint_id",
                    "endpoint_predict_request",
                    "user_id",
                ],
                "required": [
                    "model_endpoint_id",
                    "endpoint_predict_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_endpoint_id": (str,),
                    "endpoint_predict_request": (EndpointPredictRequest,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_endpoint_id": "model_endpoint_id",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_endpoint_id": "query",
                    "endpoint_predict_request": "body",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.delete_model_endpoint_v1_model_endpoints_model_endpoint_id_delete_endpoint = _Endpoint(
            settings={
                "response_type": (DeleteModelEndpointResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-endpoints/{model_endpoint_id}",
                "operation_id": "delete_model_endpoint_v1_model_endpoints_model_endpoint_id_delete",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_endpoint_id",
                    "user_id",
                ],
                "required": [
                    "model_endpoint_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_endpoint_id": (str,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_endpoint_id": "model_endpoint_id",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_endpoint_id": "path",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_async_inference_task_v1_async_tasks_task_id_get_endpoint = _Endpoint(
            settings={
                "response_type": (GetAsyncTaskResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/async-tasks/{task_id}",
                "operation_id": "get_async_inference_task_v1_async_tasks_task_id_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "task_id",
                    "user_id",
                ],
                "required": [
                    "task_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "task_id": (str,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "task_id": "task_id",
                    "user_id": "user-id",
                },
                "location_map": {
                    "task_id": "path",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_latest_model_bundle_v1_model_bundles_latest_get_endpoint = _Endpoint(
            settings={
                "response_type": (ModelBundleResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-bundles/latest",
                "operation_id": "get_latest_model_bundle_v1_model_bundles_latest_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_name",
                    "user_id",
                ],
                "required": [
                    "model_name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_name": (str,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_name": "model_name",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_name": "query",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_model_bundle_v1_model_bundles_model_bundle_id_get_endpoint = _Endpoint(
            settings={
                "response_type": (ModelBundleResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-bundles/{model_bundle_id}",
                "operation_id": "get_model_bundle_v1_model_bundles_model_bundle_id_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_bundle_id",
                    "user_id",
                ],
                "required": [
                    "model_bundle_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_bundle_id": (str,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_bundle_id": "model_bundle_id",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_bundle_id": "path",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_model_endpoint_v1_model_endpoints_model_endpoint_id_get_endpoint = _Endpoint(
            settings={
                "response_type": (GetModelEndpointResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-endpoints/{model_endpoint_id}",
                "operation_id": "get_model_endpoint_v1_model_endpoints_model_endpoint_id_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_endpoint_id",
                    "user_id",
                ],
                "required": [
                    "model_endpoint_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_endpoint_id": (str,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_endpoint_id": "model_endpoint_id",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_endpoint_id": "path",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.healthcheck_healthcheck_get_endpoint = _Endpoint(
            settings={
                "response_type": (
                    bool,
                    date,
                    datetime,
                    dict,
                    float,
                    int,
                    list,
                    str,
                    none_type,
                ),
                "auth": [],
                "endpoint_path": "/healthcheck",
                "operation_id": "healthcheck_healthcheck_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.healthcheck_healthz_get_endpoint = _Endpoint(
            settings={
                "response_type": (
                    bool,
                    date,
                    datetime,
                    dict,
                    float,
                    int,
                    list,
                    str,
                    none_type,
                ),
                "auth": [],
                "endpoint_path": "/healthz",
                "operation_id": "healthcheck_healthz_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.healthcheck_readyz_get_endpoint = _Endpoint(
            settings={
                "response_type": (
                    bool,
                    date,
                    datetime,
                    dict,
                    float,
                    int,
                    list,
                    str,
                    none_type,
                ),
                "auth": [],
                "endpoint_path": "/readyz",
                "operation_id": "healthcheck_readyz_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_model_bundles_v1_model_bundles_get_endpoint = _Endpoint(
            settings={
                "response_type": (ListModelBundlesResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-bundles",
                "operation_id": "list_model_bundles_v1_model_bundles_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_name",
                    "order_by",
                    "user_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_name": (str,),
                    "order_by": (ModelBundleOrderBy,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_name": "model_name",
                    "order_by": "order_by",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_name": "query",
                    "order_by": "query",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_model_endpoints_v1_model_endpoints_get_endpoint = _Endpoint(
            settings={
                "response_type": (ListModelEndpointsResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-endpoints",
                "operation_id": "list_model_endpoints_v1_model_endpoints_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "name",
                    "order_by",
                    "user_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "name": (str,),
                    "order_by": (ModelEndpointOrderBy,),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "name": "name",
                    "order_by": "order_by",
                    "user_id": "user-id",
                },
                "location_map": {
                    "name": "query",
                    "order_by": "query",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.update_model_endpoint_v1_model_endpoints_model_endpoint_id_put_endpoint = _Endpoint(
            settings={
                "response_type": (UpdateModelEndpointResponse,),
                "auth": ["APIKeyHeader"],
                "endpoint_path": "/model-endpoints/{model_endpoint_id}",
                "operation_id": "update_model_endpoint_v1_model_endpoints_model_endpoint_id_put",
                "http_method": "PUT",
                "servers": None,
            },
            params_map={
                "all": [
                    "model_endpoint_id",
                    "update_model_endpoint_request",
                    "user_id",
                ],
                "required": [
                    "model_endpoint_id",
                    "update_model_endpoint_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "model_endpoint_id": (str,),
                    "update_model_endpoint_request": (
                        UpdateModelEndpointRequest,
                    ),
                    "user_id": (str,),
                },
                "attribute_map": {
                    "model_endpoint_id": "model_endpoint_id",
                    "user_id": "user-id",
                },
                "location_map": {
                    "model_endpoint_id": "path",
                    "update_model_endpoint_request": "body",
                    "user_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def create_async_inference_task_v1_async_tasks_post(
        self, model_endpoint_id, endpoint_predict_request, **kwargs
    ):
        """Create Async Inference Task  # noqa: E501

        Runs an async inference prediction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_async_inference_task_v1_async_tasks_post(model_endpoint_id, endpoint_predict_request, async_req=True)
        >>> result = thread.get()

        Args:
            model_endpoint_id (str):
            endpoint_predict_request (EndpointPredictRequest):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateAsyncTaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["model_endpoint_id"] = model_endpoint_id
        kwargs["endpoint_predict_request"] = endpoint_predict_request
        return self.create_async_inference_task_v1_async_tasks_post_endpoint.call_with_http_info(
            **kwargs
        )

    def create_model_bundle_v1_model_bundles_post(
        self, create_model_bundle_request, **kwargs
    ):
        """Create Model Bundle  # noqa: E501

        Creates a Model for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_bundle_v1_model_bundles_post(create_model_bundle_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_model_bundle_request (CreateModelBundleRequest):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateModelBundleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["create_model_bundle_request"] = create_model_bundle_request
        return self.create_model_bundle_v1_model_bundles_post_endpoint.call_with_http_info(
            **kwargs
        )

    def create_model_endpoint_v1_model_endpoints_post(
        self, create_model_endpoint_request, **kwargs
    ):
        """Create Model Endpoint  # noqa: E501

        Creates a Model for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_model_endpoint_v1_model_endpoints_post(create_model_endpoint_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_model_endpoint_request (CreateModelEndpointRequest):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateModelEndpointResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["create_model_endpoint_request"] = create_model_endpoint_request
        return self.create_model_endpoint_v1_model_endpoints_post_endpoint.call_with_http_info(
            **kwargs
        )

    def create_sync_inference_task_v1_sync_tasks_post(
        self, model_endpoint_id, endpoint_predict_request, **kwargs
    ):
        """Create Sync Inference Task  # noqa: E501

        Runs a sync inference prediction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_sync_inference_task_v1_sync_tasks_post(model_endpoint_id, endpoint_predict_request, async_req=True)
        >>> result = thread.get()

        Args:
            model_endpoint_id (str):
            endpoint_predict_request (EndpointPredictRequest):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SyncEndpointPredictResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["model_endpoint_id"] = model_endpoint_id
        kwargs["endpoint_predict_request"] = endpoint_predict_request
        return self.create_sync_inference_task_v1_sync_tasks_post_endpoint.call_with_http_info(
            **kwargs
        )

    def delete_model_endpoint_v1_model_endpoints_model_endpoint_id_delete(
        self, model_endpoint_id, **kwargs
    ):
        """Delete Model Endpoint  # noqa: E501

        Lists the Models owned by the current owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_model_endpoint_v1_model_endpoints_model_endpoint_id_delete(model_endpoint_id, async_req=True)
        >>> result = thread.get()

        Args:
            model_endpoint_id (str):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteModelEndpointResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["model_endpoint_id"] = model_endpoint_id
        return self.delete_model_endpoint_v1_model_endpoints_model_endpoint_id_delete_endpoint.call_with_http_info(
            **kwargs
        )

    def get_async_inference_task_v1_async_tasks_task_id_get(
        self, task_id, **kwargs
    ):
        """Get Async Inference Task  # noqa: E501

        Gets the status of an async inference task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_async_inference_task_v1_async_tasks_task_id_get(task_id, async_req=True)
        >>> result = thread.get()

        Args:
            task_id (str):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetAsyncTaskResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["task_id"] = task_id
        return self.get_async_inference_task_v1_async_tasks_task_id_get_endpoint.call_with_http_info(
            **kwargs
        )

    def get_latest_model_bundle_v1_model_bundles_latest_get(
        self, model_name, **kwargs
    ):
        """Get Latest Model Bundle  # noqa: E501

        Lists the Models owned by the current owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_latest_model_bundle_v1_model_bundles_latest_get(model_name, async_req=True)
        >>> result = thread.get()

        Args:
            model_name (str):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ModelBundleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["model_name"] = model_name
        return self.get_latest_model_bundle_v1_model_bundles_latest_get_endpoint.call_with_http_info(
            **kwargs
        )

    def get_model_bundle_v1_model_bundles_model_bundle_id_get(
        self, model_bundle_id, **kwargs
    ):
        """Get Model Bundle  # noqa: E501

        Lists the Models owned by the current owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_bundle_v1_model_bundles_model_bundle_id_get(model_bundle_id, async_req=True)
        >>> result = thread.get()

        Args:
            model_bundle_id (str):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ModelBundleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["model_bundle_id"] = model_bundle_id
        return self.get_model_bundle_v1_model_bundles_model_bundle_id_get_endpoint.call_with_http_info(
            **kwargs
        )

    def get_model_endpoint_v1_model_endpoints_model_endpoint_id_get(
        self, model_endpoint_id, **kwargs
    ):
        """Get Model Endpoint  # noqa: E501

        Lists the Models owned by the current owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_endpoint_v1_model_endpoints_model_endpoint_id_get(model_endpoint_id, async_req=True)
        >>> result = thread.get()

        Args:
            model_endpoint_id (str):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetModelEndpointResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["model_endpoint_id"] = model_endpoint_id
        return self.get_model_endpoint_v1_model_endpoints_model_endpoint_id_get_endpoint.call_with_http_info(
            **kwargs
        )

    def healthcheck_healthcheck_get(self, **kwargs):
        """Healthcheck  # noqa: E501

        Returns 200 if the app is healthy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.healthcheck_healthcheck_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.healthcheck_healthcheck_get_endpoint.call_with_http_info(
            **kwargs
        )

    def healthcheck_healthz_get(self, **kwargs):
        """Healthcheck  # noqa: E501

        Returns 200 if the app is healthy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.healthcheck_healthz_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.healthcheck_healthz_get_endpoint.call_with_http_info(
            **kwargs
        )

    def healthcheck_readyz_get(self, **kwargs):
        """Healthcheck  # noqa: E501

        Returns 200 if the app is healthy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.healthcheck_readyz_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.healthcheck_readyz_get_endpoint.call_with_http_info(
            **kwargs
        )

    def list_model_bundles_v1_model_bundles_get(self, **kwargs):
        """List Model Bundles  # noqa: E501

        Lists the Models owned by the current owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_model_bundles_v1_model_bundles_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            model_name (str): [optional]
            order_by (ModelBundleOrderBy): [optional]
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListModelBundlesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.list_model_bundles_v1_model_bundles_get_endpoint.call_with_http_info(
            **kwargs
        )

    def list_model_endpoints_v1_model_endpoints_get(self, **kwargs):
        """List Model Endpoints  # noqa: E501

        Lists the Models owned by the current owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_model_endpoints_v1_model_endpoints_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            name (str): [optional]
            order_by (ModelEndpointOrderBy): [optional]
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListModelEndpointsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.list_model_endpoints_v1_model_endpoints_get_endpoint.call_with_http_info(
            **kwargs
        )

    def update_model_endpoint_v1_model_endpoints_model_endpoint_id_put(
        self, model_endpoint_id, update_model_endpoint_request, **kwargs
    ):
        """Update Model Endpoint  # noqa: E501

        Lists the Models owned by the current owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_model_endpoint_v1_model_endpoints_model_endpoint_id_put(model_endpoint_id, update_model_endpoint_request, async_req=True)
        >>> result = thread.get()

        Args:
            model_endpoint_id (str):
            update_model_endpoint_request (UpdateModelEndpointRequest):

        Keyword Args:
            user_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateModelEndpointResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get(
            "_return_http_data_only", True
        )
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get(
            "_spec_property_naming", False
        )
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["model_endpoint_id"] = model_endpoint_id
        kwargs["update_model_endpoint_request"] = update_model_endpoint_request
        return self.update_model_endpoint_v1_model_endpoints_model_endpoint_id_put_endpoint.call_with_http_info(
            **kwargs
        )
