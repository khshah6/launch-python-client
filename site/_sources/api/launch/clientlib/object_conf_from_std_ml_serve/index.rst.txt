:orphan:

:py:mod:`launch.clientlib.object_conf_from_std_ml_serve`
========================================================

.. py:module:: launch.clientlib.object_conf_from_std_ml_serve


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   launch.clientlib.object_conf_from_std_ml_serve.ObjectConf




.. py:class:: ObjectConf



   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default

   .. py:attribute:: args
      :annotation: :Optional[Mapping[str, Any]]

      The keyword arguments to apply to construct an instance of `class_name`.
      If `None`, then `class_name` is created with no parameters.

   .. py:attribute:: class_name
      :annotation: :str

      The fully-qualified name of a class within the Python environment.
      This value must be the name of the parameterized generic type `T`.

   .. py:attribute:: pass_args_whole
      :annotation: :bool = False

      Controls constructor parameter passing behavior.

      If true, then passes the `args` dictionary directly into the  `class_name`'s  `__init__`.
      Otherwise, pass the key-value pairs as keyword arguments.
      Defaults to false.

   .. py:method:: construct(self)

      Dynamically loads an instance of `class_name` using `args`.
      Raises an exception on loading failure.



