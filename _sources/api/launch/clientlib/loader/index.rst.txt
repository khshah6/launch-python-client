:orphan:

:py:mod:`launch.clientlib.loader`
=================================

.. py:module:: launch.clientlib.loader


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   launch.clientlib.loader.Loader
   launch.clientlib.loader.ServiceLoader




Attributes
~~~~~~~~~~

.. autoapisummary::

   launch.clientlib.loader.S



.. py:class:: Loader



   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default


.. py:class:: ServiceLoader



   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default


